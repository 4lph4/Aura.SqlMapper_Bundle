<?php
namespace Aura\Sql;

/**
 * Test class for AbstractMapper.
 * Generated by PHPUnit on 2012-09-27 at 17:37:26.
 */
class AbstractMapperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractMapper
     */
    protected $mapper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->mapper = new MockMapper;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    protected function newConnection()
    {
        $factory = new ConnectionFactory(['mock' => 'Aura\Sql\Connection\Mock']);
        return $factory->newInstance(
            'mock',
            ['host' => 'default.example.com', 'dbname' => 'test'],
            'default_user',
            'default_pass',
            []
        );
    }
    
    /**
     * @covers Aura\Sql\AbstractMapper::getCols
     * @todo Implement testGetCols().
     */
    public function testGetCols()
    {
        $expect = ['id', 'name_first', 'name_last'];
        $actual = $this->mapper->getCols();
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getColForField
     * @todo Implement testGetColForField().
     */
    public function testGetColForField()
    {
        $expect = 'id';
        $actual = $this->mapper->getColForField('identity');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getFields
     * @todo Implement testGetFields().
     */
    public function testGetFields()
    {
        $expect = ['identity', 'firstName', 'lastName'];
        $actual = $this->mapper->getFields();
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getFieldForCol
     * @todo Implement testGetFieldForCol().
     */
    public function testGetFieldForCol()
    {
        $expect = 'identity';
        $actual = $this->mapper->getFieldForCol('id');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getIdentityField
     * @todo Implement testGetIdentityField().
     */
    public function testGetIdentityField()
    {
        $expect = 'identity';
        $actual = $this->mapper->getIdentityField('id');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getIdentityValue
     * @todo Implement testGetIdentityValue().
     */
    public function testGetIdentityValue()
    {
        $object = (object) [
            'identity' => 88
        ];
        
        $expect = 88;
        $actual = $this->mapper->getIdentityValue($object);
        $this->assertSame($expect, $actual);
        
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getPrimaryCol
     * @todo Implement testGetPrimaryCol().
     */
    public function testGetPrimaryCol()
    {
        $expect = 'id';
        $actual = $this->mapper->getPrimaryCol('id');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getTable
     * @todo Implement testGetTable().
     */
    public function testGetTable()
    {
        $expect = 'fake_table';
        $actual = $this->mapper->getTable();
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getTableCol
     * @todo Implement testGetTableCol().
     */
    public function testGetTableCol()
    {
        $expect = 'fake_table.name_last';
        $actual = $this->mapper->getTableCol('name_last');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getTableColAsField
     * @todo Implement testGetTableColAsField().
     */
    public function testGetTableColAsField()
    {
        $expect = 'fake_table.name_last AS lastName';
        $actual = $this->mapper->getTableColAsField('name_last');
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getTablePrimaryCol
     * @todo Implement testGetTablePrimaryCol().
     */
    public function testGetTablePrimaryCol()
    {
        $expect = 'fake_table.id';
        $actual = $this->mapper->getTablePrimaryCol();
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getTableColsAsFields
     * @todo Implement testGetTableColsAsFields().
     */
    public function testGetTableColsAsFields()
    {
        $expect = [
            'fake_table.id AS identity',
            'fake_table.name_first AS firstName',
            'fake_table.name_last AS lastName',
        ];
        
        $actual = $this->mapper->getTableColsAsFields([
            'id',
            'name_first',
            'name_last',
        ]);
        
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::modifySelect
     * @todo Implement testModifySelect().
     */
    public function testModifySelect()
    {
        $connection = $this->newConnection();
        $select = $connection->newSelect();
        $this->mapper->modifySelect($select);
        $actual = $select->__toString();
        $expect = "
            SELECT
                fake_table.id AS identity,
                fake_table.name_first AS firstName,
                fake_table.name_last AS lastName
            FROM
                fake_table
        ";
        
        $this->assertSameSql($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::modifyInsert
     * @todo Implement testModifyInsert().
     */
    public function testModifyInsert()
    {
        $object = (object) [
            'identity' => null,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $connection = $this->newConnection();
        $insert = $connection->newInsert();
        $this->mapper->modifyInsert($insert, $object);
        
        $actual = $insert->__toString();
        $expect = "
            INSERT INTO fake_table (
                id,
                name_first,
                name_last
            ) VALUES (
                :id,
                :name_first,
                :name_last
            )
        ";
        $this->assertSameSql($expect, $actual);
        
        $actual = $insert->getBind();
        $expect = [
            'id' => null,
            'name_first' => 'Bolivar',
            'name_last' => 'Shagnasty',
        ];
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testModifyUpdate().
     */
    public function testModifyUpdate()
    {
        $object = (object) [
            'identity' => 88,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $connection = $this->newConnection();
        $update = $connection->newUpdate();
        $this->mapper->modifyUpdate($update, $object);
        
        $actual = $update->__toString();
        $expect = "
            UPDATE fake_table
            SET
                id = :id,
                name_first = :name_first,
                name_last = :name_last
            WHERE
                id = 88
        ";
        $this->assertSameSql($expect, $actual);
        
        $actual = $update->getBind();
        $expect = [
            'id' => 88,
            'name_first' => 'Bolivar',
            'name_last' => 'Shagnasty',
        ];
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testModifyUpdate().
     */
    public function testModifyUpdateChanges()
    {
        $new_object = (object) [
            'identity' => 88,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $old_object = (object) [
            'identity' => 88,
            'firstName' => 'Boliver',
            'lastName' => 'Shagnasty',
        ];
        
        $connection = $this->newConnection();
        $update = $connection->newUpdate();
        $this->mapper->modifyUpdate($update, $new_object, $old_object);
        
        $actual = $update->__toString();
        $expect = "
            UPDATE fake_table
            SET
                name_first = :name_first
            WHERE
                id = 88
        ";
        $this->assertSameSql($expect, $actual);
        
        $actual = $update->getBind();
        $expect = [
            'name_first' => 'Bolivar',
        ];
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::modifyDelete
     * @todo Implement testModifyDelete().
     */
    public function testModifyDelete()
    {
        $object = (object) [
            'identity' => 88,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $connection = $this->newConnection();
        $delete = $connection->newDelete();
        $this->mapper->modifyDelete($delete, $object);
        
        $actual = $delete->__toString();
        $expect = "
            DELETE FROM fake_table
            WHERE
                id = 88
        ";
        $this->assertSameSql($expect, $actual);
        
        $actual = $delete->getBind();
        $expect = [];
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::getInsertData
     * @todo Implement testGetInsertData().
     */
    public function testGetInsertData()
    {
        $object = (object) [
            'identity' => null,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $expect = [
            'id' => null,
            'name_first' => 'Bolivar',
            'name_last' => 'Shagnasty',
        ];
        
        $actual = $this->mapper->getInsertData($object);
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testGetUpdateData().
     */
    public function testGetUpdateData()
    {
        $object = (object) [
            'identity' => 88,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $expect = [
            'id' => 88,
            'name_first' => 'Bolivar',
            'name_last' => 'Shagnasty',
        ];
        
        $actual = $this->mapper->getUpdateData($object);
        $this->assertSame($expect, $actual);
    }

    /**
     * @todo Implement testGetUpdateDataChanges().
     */
    public function testGetUpdateDataChanges()
    {
        $new_object = (object) [
            'identity' => 88,
            'firstName' => 'Bolivar',
            'lastName' => 'Shagnasty',
        ];
        
        $old_object = (object) [
            'identity' => 88,
            'firstName' => 'Boliver',
            'lastName' => 'Shagnasty',
        ];
        
        $expect = [
            'name_first' => 'Bolivar',
        ];
        
        // uses getUpdateDataChanges()
        $actual = $this->mapper->getUpdateData($new_object, $old_object);
        $this->assertSame($expect, $actual);
    }

    /**
     * @covers Aura\Sql\AbstractMapper::compare
     * @todo Implement testCompare().
     */
    public function testCompare()
    {
        $new_numeric = 88;
        $old_numeric = "69";
        $compare = $this->mapper->compare($new_numeric, $old_numeric);
        $this->assertFalse($compare);
        
        $new_numeric = 88;
        $old_numeric = "88";
        $compare = $this->mapper->compare($new_numeric, $old_numeric);
        $this->assertTrue($compare);
        
        $new_string = "Foo";
        $old_string = "Bar";
        $compare = $this->mapper->compare($new_string, $old_string);
        $this->assertFalse($compare);
        
        $new_string = "Foo";
        $old_string = "Foo";
        $compare = $this->mapper->compare($new_string, $old_string);
        $this->assertTrue($compare);
    }

    protected function assertSameSql($expect, $actual)
    {
        $expect = trim($expect);
        $expect = preg_replace('/^\s*/m', '', $expect);
        $expect = preg_replace('/\s*$/m', '', $expect);
        
        $actual = trim($actual);
        $actual = preg_replace('/^\s*/m', '', $actual);
        $actual = preg_replace('/\s*$/m', '', $actual);
        
        $this->assertSame($expect, $actual);
    }
}
