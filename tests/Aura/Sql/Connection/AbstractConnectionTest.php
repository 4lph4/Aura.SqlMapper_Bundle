<?php
namespace Aura\Sql\Connection;

use Aura\Sql\ConnectionFactory as ConnectionFactory;
use Aura\Sql\Select;

use Aura\Di\Forge;
use Aura\Di\Config;

use Aura\Signal\Manager as SignalManager;
use Aura\Signal\HandlerFactory as HandlerFactory;
use Aura\Signal\ResultFactory as ResultFactory;
use Aura\Signal\ResultCollection as ResultCollection;

use PDO;

/**
 * Test class for AbstractConnection.
 * Generated by PHPUnit on 2011-06-21 at 16:49:51.
 */
abstract class AbstractConnectionTest extends \PHPUnit_Framework_TestCase
{
    protected $extension;
    
    protected $dsn = array();
    
    protected $connect_type;
    
    protected $expect_dsn_string;
    
    protected $expect_class;
    
    protected $expect_convert_select = array (
        0 => array (
            'id' => '6',
            'name' => 'Gertrude',
        ),
        1 => array (
            'id' => '7',
            'name' => 'Hanna',
        ),
        2 => array (
            'id' => '8',
            'name' => 'Ione',
        ), 3 => 
        array (
            'id' => '9',
            'name' => 'Julia',
        ), 4 => 
        array (
            'id' => '10',
            'name' => 'Kara',
        ),
    );
    
    protected $conn;
    
    protected $table = 'aura';
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        
        // skip if we don't have the extension
        if (! extension_loaded($this->extension)) {
            $this->markTestSkipped("Extension '{$this->extension}' not loaded.");
        }
        
        // load test config values
        $class = get_class($this);
        $this->connect_params = $GLOBALS[$class]['connect_params'];
        $this->expect_dsn_string = $GLOBALS[$class]['expect_dsn_string'];
        
        // build the connection object
        $forge = new Forge(new Config);
        
        $signal_manager = new SignalManager(new HandlerFactory, new ResultFactory, new ResultCollection);

        $type = $this->connect_type;
        $params = $this->connect_params;
        $params['signal'] = $signal_manager;
        
        $factory = new ConnectionFactory($forge, array(
            'mysql'         => 'Aura\Sql\Connection\Mysql',
            'sqlsrv'        => 'Aura\Sql\Connection\Sqlsrv',
            'sqlsrv_denali' => 'Aura\Sql\Connection\SqlsrvDenali',
        ));
        
        $this->conn = $factory->newInstance($type, $params);
        
        $this->dropTable();
        $this->createTable();
        $this->fillTable();
    }
    
    protected function createTable()
    {
        $this->conn->query($this->create_table);
    }
    
    protected function dropTable()
    {
        $this->conn->query("DROP TABLE {$this->table}");
    }
    
    protected function fillTable()
    {
        $names = array(
            'Anna', 'Betty', 'Clara', 'Donna', 'Fiona',
            'Gertrude', 'Hanna', 'Ione', 'Julia', 'Kara',
        );
        
        foreach ($names as $name) {
            $this->conn->insert($this->table, array('name' => $name));
        }
    }
    
    /**
     * @todo Implement testGetDsnString().
     */
    public function testGetDsnString()
    {
        $actual = $this->conn->getDsnString();
        $this->assertSame($this->expect_dsn_string, $actual);
    }
    
    /**
     * @todo Implement testConnect().
     */
    public function testConnect()
    {
        $actual = $this->conn->connect();
        $this->assertInstanceOf('\PDO', $actual);
    }
    
    public function testQuery()
    {
        $text = "SELECT * FROM {$this->table}";
        $stmt = $this->conn->query($text);
        $this->assertInstanceOf('PDOStatement', $stmt);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $expect = 10;
        $actual = count($result);
        $this->assertSame($expect, $actual);
    }
    
    public function testQueryWithData()
    {
        $text = "SELECT * FROM {$this->table} WHERE id <= :val";
        $data['val'] = '5';
        $stmt = $this->conn->query($text, $data);
        $this->assertInstanceOf('PDOStatement', $stmt);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $expect = 5;
        $actual = count($result);
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchAll()
    {
        $text = "SELECT * FROM {$this->table}";
        $result = $this->conn->fetchAll($text);
        $expect = 10;
        $actual = count($result);
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchAssoc()
    {
        $text = "SELECT * FROM {$this->table} ORDER BY id";
        $result = $this->conn->fetchAssoc($text);
        $expect = 10;
        $actual = count($result);
        $this->assertSame($expect, $actual);
        
        // // 1-based IDs, not 0-based sequential values
        $expect = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        $actual = array_keys($result);
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchCol()
    {
        $text = "SELECT id FROM {$this->table} ORDER BY id";
        $result = $this->conn->fetchCol($text);
        $expect = 10;
        $actual = count($result);
        $this->assertSame($expect, $actual);
        
        // // 1-based IDs, not 0-based sequential values
        $expect = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10');
        $this->assertSame($expect, $result);
    }
    
    public function testFetchValue()
    {
        $text = "SELECT id FROM {$this->table} WHERE id = 1";
        $actual = $this->conn->fetchValue($text);
        $expect = '1';
        $this->assertSame($expect, $actual);
        
        // use a Select
        $select = new Select;
        $select->cols[] = 'id';
        $select->from[] = $this->table;
        $select->where['id = ?'] = 1;
        $actual = $this->conn->fetchValue($select);
        $expect = '1';
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchPairs()
    {
        $text = "SELECT id, name FROM {$this->table} ORDER BY id";
        $actual = $this->conn->fetchPairs($text);
        $expect = array (
          1  => 'Anna',
          2  => 'Betty',
          3  => 'Clara',
          4  => 'Donna',
          5  => 'Fiona',
          6  => 'Gertrude',
          7  => 'Hanna',
          8  => 'Ione',
          9  => 'Julia',
          10 => 'Kara',
        );
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchOne()
    {
        $text = "SELECT id, name FROM {$this->table} WHERE id = 1";
        $actual = $this->conn->fetchOne($text);
        $expect = array (
            'id'   => '1',
            'name' => 'Anna',
        );
        $this->assertSame($expect, $actual);

        // use a Select
        $select = new Select;
        $select->cols[] = 'id';
        $select->cols[] = 'name';
        $select->from[] = $this->table;
        $select->where['id = ?'] = 1;
        $actual = $this->conn->fetchOne($select);
        $expect = array (
            'id'   => '1',
            'name' => 'Anna',
        );
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchTableList()
    {
        $actual = $this->conn->fetchTableList();
        $expect = array($this->table);
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchTableCols()
    {
        $actual = $this->conn->fetchTableCols($this->table);
        $this->assertSame($this->expect_fetch_table_cols, $actual);
    }
    
    // /**
    //  * @todo Implement testQuote().
    //  */
    // public function testQuote()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
    // 
    // /**
    //  * @todo Implement testQuoteInto().
    //  */
    // public function testQuoteInto()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
    // 
    // /**
    //  * @todo Implement testQuoteMulti().
    //  */
    // public function testQuoteMulti()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
    // 
    // /**
    //  * @todo Implement testQuoteName().
    //  */
    // public function testQuoteName()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
    // 
    // /**
    //  * @todo Implement testQuoteNamesIn().
    //  */
    // public function testQuoteNamesIn()
    // {
    //     // Remove the following lines when you implement this test.
    //     $this->markTestIncomplete(
    //       'This test has not been implemented yet.'
    //     );
    // }
    
    public function testInsertAndLastInsertId()
    {
        $data = array('name' => 'Laura');
        $actual = $this->conn->insert($this->table, $data);
        
        // did we get the right last ID?
        $actual = $this->conn->lastInsertId();
        $expect = '11';
        $this->assertSame($expect, $actual);
        
        // did it insert?
        $actual = $this->conn->fetchOne("SELECT * FROM {$this->table} WHERE id = 11");
        $expect = array('id' => '11', 'name' => 'Laura');
        $this->assertSame($actual, $expect);
    }
    
    public function testUpdate()
    {
        $where = 'id = 1';
        $data  = array('name' => 'Annabelle');
        $actual = $this->conn->update($this->table, $data, $where);
        
        // did it update?
        $actual = $this->conn->fetchOne("SELECT * FROM {$this->table} WHERE id = 1");
        $expect = array('id' => '1', 'name' => 'Annabelle');
        $this->assertSame($actual, $expect);
        
        // did anything else update?
        $actual = $this->conn->fetchOne("SELECT * FROM {$this->table} WHERE id = 2");
        $expect = array('id' => '2', 'name' => 'Betty');
        $this->assertSame($actual, $expect);
    }
    
    public function testDelete()
    {
        $where = 'id = 1';
        $actual = $this->conn->delete($this->table, $where);
        
        // did it delete?
        $actual = $this->conn->fetchOne("SELECT * FROM {$this->table} WHERE id = 1");
        $this->assertFalse($actual);
        
        // do we still have everything else?
        $actual = $this->conn->fetchAll("SELECT * FROM {$this->table}");
        $expect = 9;
        $this->assertSame($expect, count($actual));
    }
    
    public function testConvertSelect()
    {
        $select = new Select;
        $select->distinct = true;
        $select->cols[] = 'id';
        $select->cols[] = 'name';
        $select->from[] = $this->table;
        $select->limit = 5;
        $select->offset = 5;
        $select->order[] = 'name';
        $actual = $this->conn->fetchAll($select);
        $this->assertSame($this->expect_convert_select, $actual);
    }
}
