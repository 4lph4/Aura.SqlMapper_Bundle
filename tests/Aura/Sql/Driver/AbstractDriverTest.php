<?php
namespace Aura\Sql\Driver;
use PDO;
use Aura\Sql\DriverFactory;
use Aura\Sql\ColumnFactory;
use Aura\Sql\Column;

/**
 * Test class for AbstractDriver.
 * Generated by PHPUnit on 2011-06-21 at 16:49:51.
 */
abstract class AbstractDriverTest extends \PHPUnit_Framework_TestCase
{
    protected $extension;
    
    protected $dsn = [];
    
    protected $driver_params = array(
        'dsn'      => [],
        'username' => null,
        'password' => null,
        'options'  => [],
    );
    
    protected $expect_dsn_string;
    
    protected $driver_type;
    
    protected $driver;
    
    protected $schema1 = 'aura_test_schema1';
    
    protected $schema2 = 'aura_test_schema2';
    
    protected $table = 'aura_test_table';
    
    protected $create_table;
    
    protected $expect_fetch_table_list;
    
    protected $expect_fetch_table_cols;
    
    protected $expect_quote_scalar;
    
    protected $expect_quote_array;
    
    protected $expect_quote_into;
    
    protected $expect_quote_into_many;
    
    protected $expect_quote_multi;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
        
        // skip if we don't have the extension
        if (! extension_loaded($this->extension)) {
            $this->markTestSkipped("Extension '{$this->extension}' not loaded.");
        }
        
        // convert column arrays to objects
        foreach ($this->expect_fetch_table_cols as $name => $info) {
            $this->expect_fetch_table_cols[$name] = new Column(
                $info['name'],
                $info['type'],
                $info['size'],
                $info['scale'],
                $info['notnull'],
                $info['default'],
                $info['autoinc'],
                $info['primary']
            );
        }
        
        // load test config values
        $test_class = get_class($this);
        $this->driver_params = array_merge(
            $this->driver_params,
            $GLOBALS[$test_class]['driver_params']
        );
        
        $this->expect_dsn_string = $GLOBALS[$test_class]['expect_dsn_string'];
        
        $driver_factory = new DriverFactory;
        
        $this->driver = $driver_factory->newInstance(
            $this->driver_type,
            $this->driver_params['dsn'],
            $this->driver_params['username'],
            $this->driver_params['password'],
            $this->driver_params['options']
        );
        
        $this->dropSchemas();
        $this->createSchemas();
        $this->createTables();
        $this->fillTable();
    }
    
    abstract protected function createSchemas();
    
    abstract protected function dropSchemas();
    
    protected function createTables()
    {
        // create in schema 1
        $sql = $this->create_table;
        $this->driver->query($sql);
        
        // create again in schema 2
        $sql = str_replace($this->table, "{$this->schema2}.{$this->table}", $sql);
        $this->driver->query($sql);
    }
    
    // only fills in schema 1
    protected function fillTable()
    {
        $names = [
            'Anna', 'Betty', 'Clara', 'Donna', 'Fiona',
            'Gertrude', 'Hanna', 'Ione', 'Julia', 'Kara',
        ];
        
        foreach ($names as $name) {
            $this->driver->insert($this->table, ['name' => $name]);
        }
    }
    
    public function testGetProfiler()
    {
        $actual = $this->driver->getProfiler();
        $this->assertInstanceOf('\Aura\Sql\Profiler', $actual);
    }
    
    /**
     * @todo Implement testGetDsnString().
     */
    public function testGetDsnString()
    {
        $actual = $this->driver->getDsnString();
        $this->assertEquals($this->expect_dsn_string, $actual);
    }
    
    /**
     * @todo Implement testConnect().
     */
    public function testGetPdo()
    {
        $actual = $this->driver->getPdo();
        $this->assertInstanceOf('\PDO', $actual);
    }
    
    public function testQuery()
    {
        $text = "SELECT * FROM {$this->table}";
        $stmt = $this->driver->query($text);
        $this->assertInstanceOf('PDOStatement', $stmt);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $expect = 10;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
    }
    
    public function testQueryWithData()
    {
        $text = "SELECT * FROM {$this->table} WHERE id <= :val";
        $data['val'] = '5';
        $stmt = $this->driver->query($text, $data);
        $this->assertInstanceOf('PDOStatement', $stmt);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $expect = 5;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
    }
    
    public function testQueryWithArrayData()
    {
        $text = "SELECT * FROM {$this->table} WHERE id IN (:list) OR id = :id";
        
        $data['list'] = [1, 2, 3, 4];
        $data['id'] = 5;
        
        $stmt = $this->driver->query($text, $data);
        $this->assertInstanceOf('PDOStatement', $stmt);
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $expect = 5;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
    }
    
    public function testPrepareWithQuotedStringsAndData()
    {
        $text = "SELECT * FROM {$this->table}
                 WHERE 'leave :foo alone'
                 AND id IN (:list)
                 AND \"leave :bar alone\"";
        
        $data = [
            'list' => [1, 2, 3, 4, 5],
            'foo' => 'WRONG',
            'bar' => 'WRONG',
        ];
        
        $stmt = $this->driver->prepare($text, $data);
        
        $expect = str_replace(':list', '1, 2, 3, 4, 5', $text);
        $actual = $stmt->queryString;
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchAll()
    {
        $text = "SELECT * FROM {$this->table}";
        $result = $this->driver->fetchAll($text);
        $expect = 10;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
    }
    
    public function testFetchAssoc()
    {
        $text = "SELECT * FROM {$this->table} ORDER BY id";
        $result = $this->driver->fetchAssoc($text);
        $expect = 10;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
        
        // // 1-based IDs, not 0-based sequential values
        $expect = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        $actual = array_keys($result);
        $this->assertEquals($expect, $actual);
    }
    
    public function testFetchCol()
    {
        $text = "SELECT id FROM {$this->table} ORDER BY id";
        $result = $this->driver->fetchCol($text);
        $expect = 10;
        $actual = count($result);
        $this->assertEquals($expect, $actual);
        
        // // 1-based IDs, not 0-based sequential values
        $expect = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
        $this->assertEquals($expect, $result);
    }
    
    public function testFetchValue()
    {
        $text = "SELECT id FROM {$this->table} WHERE id = 1";
        $actual = $this->driver->fetchValue($text);
        $expect = '1';
        $this->assertEquals($expect, $actual);
    }
    
    public function testFetchPairs()
    {
        $text = "SELECT id, name FROM {$this->table} ORDER BY id";
        $actual = $this->driver->fetchPairs($text);
        $expect = [
          1  => 'Anna',
          2  => 'Betty',
          3  => 'Clara',
          4  => 'Donna',
          5  => 'Fiona',
          6  => 'Gertrude',
          7  => 'Hanna',
          8  => 'Ione',
          9  => 'Julia',
          10 => 'Kara',
        ];
        $this->assertEquals($expect, $actual);
    }
    
    public function testFetchOne()
    {
        $text = "SELECT id, name FROM {$this->table} WHERE id = 1";
        $actual = $this->driver->fetchOne($text);
        $expect = [
            'id'   => '1',
            'name' => 'Anna',
        ];
        $this->assertEquals($expect, $actual);
    }
    
    public function testFetchTableList()
    {
        $actual = $this->driver->fetchTableList();
        $this->assertEquals($this->expect_fetch_table_list, $actual);
    }
    
    public function testFetchTableList_schema()
    {
        $actual = $this->driver->fetchTableList('aura_test_schema2');
        $this->assertEquals($this->expect_fetch_table_list_schema, $actual);
    }
    
    public function testFetchTableCols()
    {
        $actual = $this->driver->fetchTableCols($this->table);
        $expect = $this->expect_fetch_table_cols;
        ksort($actual);
        ksort($expect);
        $this->assertSame(count($expect), count($actual));
        foreach (array_keys($expect) as $name) {
            $this->assertEquals($expect[$name], $actual[$name]);
        }
    }
    
    public function testFetchTableCols_schema()
    {
        $actual = $this->driver->fetchTableCols($this->table, 'aura_test_schema2');
        $expect = $this->expect_fetch_table_cols;
        ksort($actual);
        ksort($expect);
        $this->assertSame(count($expect), count($actual));
        foreach ($expect as $name => $info) {
            $this->assertEquals($expect[$name], $actual[$name]);
        }
    }
    
    public function testQuote()
    {
        // quote a scalar
        $actual = $this->driver->quote('"foo" bar \'baz\'');
        $this->assertEquals($this->expect_quote_scalar, $actual);
        
        // quote a number
        $actual = $this->driver->quote(123.456);
        $this->assertEquals(123.456, $actual);
        
        // quote a numeric
        $actual = $this->driver->quote('123.456');
        $this->assertEquals(123.456, $actual);
        
        // quote an array
        $actual = $this->driver->quote(array('"foo"', 'bar', "'baz'"));
        $this->assertEquals($this->expect_quote_array, $actual);
    }
    
    /**
     * @todo Implement testQuoteInto().
     */
    public function testQuoteInto()
    {
        // no placeholders
        $actual = $this->driver->quoteInto('foo = bar', "'zim'");
        $expect = 'foo = bar';
        $this->assertEquals($expect, $actual);
        
        // one placeholder, one value
        $actual = $this->driver->quoteInto("foo = ?", "'bar'");
        $this->assertEquals($this->expect_quote_into,$actual);
        
        // many placeholders, many values
        $actual = $this->driver->quoteInto("foo = ? AND zim = ?", ["'bar'", "'baz'"]);
        $this->assertEquals($this->expect_quote_into_many, $actual);
        
        // many placeholders, too many values
        $actual = $this->driver->quoteInto("foo = ? AND zim = ?", ["'bar'", "'baz'", "'gir'"]);
        $this->assertEquals($this->expect_quote_into_many, $actual);
    }
    
    /**
     * @todo Implement testQuoteMulti().
     */
    public function testQuoteMulti()
    {
        $where = array(
            'id = 1',
            'foo = ?' => 'bar',
            'zim IN(?)' => array('dib', 'gir', 'baz'),
        );
        $actual = $this->driver->quoteMulti($where, ' AND ');
        $this->assertEquals($this->expect_quote_multi, $actual);
    }
    
    /**
     * @todo Implement testQuoteName().
     */
    public function testQuoteName()
    {
        // table AS alias
        $actual = $this->driver->quoteName('table AS alias');
        $this->assertEquals($this->expect_quote_name_table_as_alias, $actual);
        
        // table.col AS alias
        $actual = $this->driver->quoteName('table.col AS alias');
        $this->assertEquals($this->expect_quote_name_table_col_as_alias, $actual);
        
        // table alias
        $actual = $this->driver->quoteName('table alias');
        $this->assertEquals($this->expect_quote_name_table_alias, $actual);
        
        // table.col alias
        $actual = $this->driver->quoteName('table.col alias');
        $this->assertEquals($this->expect_quote_name_table_col_alias, $actual);
        
        // plain old identifier
        $actual = $this->driver->quoteName('table');
        $this->assertEquals($this->expect_quote_name_plain, $actual);
        
        // star
        $actual = $this->driver->quoteName('*');
        $this->assertEquals('*', $actual);
        
        // star dot star
        $actual = $this->driver->quoteName('*.*');
        $this->assertEquals('*.*', $actual);
    }
    
    /**
     * @todo Implement testQuoteNamesIn().
     */
    public function testQuoteNamesIn()
    {
        $sql = "*, *.*, foo.bar, CONCAT('foo.bar', \"baz.dib\") AS zim";
        $actual = $this->driver->quoteNamesIn($sql);
        $this->assertEquals($this->expect_quote_names_in, $actual);
    }
    
    public function testInsertAndLastInsertId()
    {
        $data = ['name' => 'Laura'];
        $actual = $this->driver->insert($this->table, $data);
        
        // did we get the right last ID?
        $actual = $this->fetchLastInsertId();
        $expect = '11';
        $this->assertEquals($expect, $actual);
        
        // did it insert?
        $actual = $this->driver->fetchOne("SELECT id, name FROM {$this->table} WHERE id = 11");
        $expect = ['id' => '11', 'name' => 'Laura'];
        $this->assertEquals($actual, $expect);
    }
    
    protected function fetchLastInsertId()
    {
        return $this->driver->lastInsertId();
    }
    
    public function testUpdate()
    {
        $where = 'id = 1';
        $data  = ['name' => 'Annabelle'];
        $actual = $this->driver->update($this->table, $data, $where);
        
        // did it update?
        $actual = $this->driver->fetchOne("SELECT id, name FROM {$this->table} WHERE id = 1");
        $expect = ['id' => '1', 'name' => 'Annabelle'];
        $this->assertEquals($actual, $expect);
        
        // did anything else update?
        $actual = $this->driver->fetchOne("SELECT id, name FROM {$this->table} WHERE id = 2");
        $expect = ['id' => '2', 'name' => 'Betty'];
        $this->assertEquals($actual, $expect);
    }
    
    public function testDelete()
    {
        $where = 'id = 1';
        $actual = $this->driver->delete($this->table, $where);
        
        // did it delete?
        $actual = $this->driver->fetchOne("SELECT * FROM {$this->table} WHERE id = 1");
        $this->assertFalse($actual);
        
        // do we still have everything else?
        $actual = $this->driver->fetchAll("SELECT * FROM {$this->table}");
        $expect = 9;
        $this->assertEquals($expect, count($actual));
    }
    
    public function testTransactions()
    {
        // data
        $data = ['name' => 'Laura'];

        // begin and rollback
        $this->driver->beginTransaction();
        $this->driver->insert($this->table, $data);
        $actual = $this->driver->fetchAll("SELECT * FROM {$this->table}");
        $this->assertSame(11, count($actual));
        $this->driver->rollback();
        $actual = $this->driver->fetchAll("SELECT * FROM {$this->table}");
        $this->assertSame(10, count($actual));
        
        // begin and commit
        $this->driver->beginTransaction();
        $this->driver->insert($this->table, $data);
        $actual = $this->driver->fetchAll("SELECT * FROM {$this->table}");
        $this->driver->commit();
        $this->assertSame(11, count($actual));
    }
}
